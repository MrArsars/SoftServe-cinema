@model dynamic
@{
ViewData["Title"] = "Genres";
}
<div id="createGenreDrawerContainer"
     class="hidden fixed top-0 right-0 z-40 w-full h-screen max-w-xs p-4 overflow-y-auto transition-transform translate-x-full"
     tabindex="-1" aria-labelledby="drawer-label" aria-hidden="true">
    <partial name="AddGenre"/>
</div>
<div class="bg-gray-100 drawer-add-genre fixed top-0 right-80 z-40 h-screen max-w-xs p-4 overflow-y-auto transition-transform translate-x-full">
    <h5 id="drawer-label"
        class="inline-flex items-center mb-6 text-sm font-semibold text-gray-500 uppercase dark:text-gray-400">Обрати / Створити жанр</h5>
    <table class="">
        <thead class="bg-gray-200">
        <tr>
            <th scope="col" class="p-4">
                <div class="flex items-center">
                    <input id="genre-checkbox-all" type="checkbox" class="w-4 h-4 border-gray-300 rounded bg-gray-50">
                    <label for="genre-checkbox-all" class="sr-only">checkbox</label>
                </div>
            </th>
            <th scope="col" class="p-4 text-xs font-medium text-left text-gray-500 uppercase">
                Назва
            </th>
        </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200">
        @foreach (var genre in Model)
        {
        <tr id="output">
            <td class="w-4 p-4">
                <div class="flex">
                    <input id="checkbox-@genre.Id.ToString()" type="checkbox"
                           class="genre-checkbox-item w-4 h-4 border-gray-300 rounded bg-gray-50">
                    <label for="checkbox-@genre.Id.ToString()" class="sr-only">checkbox</label>
                </div>
            </td>
            <td id="search-this" class="p-4 text-sm font-normal text-gray-500">
                @genre.Name
            </td>
        </tr>
        }
        </tbody>
    </table>
    <button type="button" id="add-selected-genres" class="mt-4 text-white font-bold bg-green-400 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-gray-600 focus:border-gray-600 block w-full p-2.5">
        Додати обрані
    </button>
    <button type="button" id="drawer-create-genre-toggle" class="mt-4 font-bold bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-gray-600 focus:border-gray-600 block w-full p-2.5">
        + Створити Жанр
    </button>
    <button type="button" id="drawer-add-genre-close"
            class="mt-4 inline-flex w-full justify-center text-gray-500 items-center bg-white hover:bg-gray-100 focus:ring-4 focus:outline-none focus:ring-primary-300 rounded-lg border border-gray-200 text-sm font-medium px-5 py-2.5 hover:text-gray-900 focus:z-10 dark:bg-gray-700 dark:text-gray-300 dark:border-gray-500 dark:hover:text-white dark:hover:bg-gray-600 dark:focus:ring-gray-600">
        <svg aria-hidden="true" class="w-5 h-5 -ml-1 sm:mr-1" fill="none" stroke="currentColor"
             viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12">
            </path>
        </svg>
        Скасувати
    </button>
</div>
<script>
    $(document).ready(function () {
        $('#drawer-create-genre-toggle').click(function () {
            $('#createGenreDrawerContainer').toggleClass('hidden');
        });

        $('#drawer-create-genre-close').click(function () {
            $('#createGenreDrawerContainer').toggleClass('hidden');
        });
    });
    // Select/Deselect all checkboxes
    const checkboxAllGenres = document.getElementById('genre-checkbox-all');
    const checkboxItemsGenres = document.querySelectorAll('.genre-checkbox-item');

    checkboxAllGenres.addEventListener('change', function () {
        checkboxItemsGenres.forEach(checkbox => {
            checkbox.checked = checkboxAllGenres.checked;
        });
        updateSelectedGenres();
    });

    checkboxItemsGenres.forEach(checkbox => {
        checkbox.addEventListener('change', function () {
            if (!checkbox.checked) {
                checkboxAllGenres.checked = false;
            } else {
                const allCheckedGenres = Array.from(checkboxItemsGenres).every(checkbox => checkbox.checked);
                checkboxAllGenres.checked = allCheckedGenres;
            }
            updateSelectedGenres();
        });
    });

    document.getElementById('add-selected-genres').addEventListener('click', function () {
        const selectedGenres = Array.from(document.querySelectorAll('.genre-checkbox-item:checked')).map(checkbox => checkbox.getAttribute('data-id'));
        localStorage.setItem('selectedGenreIds', JSON.stringify(selectedGenres));
        $('#addGenreDrawerContainer').toggleClass('hidden');
    });

    function updateSelectedGenres() {
        const selectedGenres = Array.from(document.querySelectorAll('.genre-checkbox-item:checked')).map(checkbox => checkbox.getAttribute('data-id'));
        localStorage.setItem('selectedGenreIds', JSON.stringify(selectedGenres));
        $('#Genre').val(JSON.stringify(selectedGenres));
    }
</script>
